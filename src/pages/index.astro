---
import AppWrapper from '../components/building-blocks/AppWrapper.astro';
import Segment from '../components/building-blocks/Segment.astro';
import { SITE_DESCRIPTION, SITE_TITLE } from '../consts';
---

<AppWrapper title={SITE_TITLE} description={SITE_DESCRIPTION}>
				<!-- Hero Section -->
				<section class="text-center py-10 md:py-24 max-w-4xl mx-auto">
						<img src="/kool-codez-logo.svg" alt="Kool Codez" class="max-w-md mx-auto" />
					<p class="text-xl mx-auto max-w-xl pt-6">
						I craft fast, fluid interfaces built on a core of clean, stable, and genuinely maintainable code.
					</p>
				</section>

				<!-- Expertise Section -->
				<section class="">
					<h2 class="text-center mb-12 text-4xl font-light text-white">My Niche</h2>
					<div class="grid grid-cols-1 md:grid-cols-3 gap-8">
						<Segment>
							<div slot="title">One truth</div>
							<div slot="description">I enforce a 100% TypeScript environment built on a single source of truth for types. This eliminates data duplication by validating types directly against backend contracts like OpenAPI and JSON Schema, ensuring frontend to backend consistency and preventing entire classes of integration bugs.</div>
						</Segment>
						<Segment>	
							<div slot="title">Light touch</div>
							<div slot="description">My design philosophy is minimal, clean, and slick. I prioritize speed and clarity, rejecting useless animations and overloaded interfaces that bog down the client. The result is a lightweight and intuitive UI that keeps the user focused and the experience seamless.

							</div>		
						</Segment>
						<Segment>
							<div slot="title">True balance</div>
							<div slot="description">My 8 year experience on performance sensitive applications has taught me the importance of balancing optimization with long term code health. I focus on finding that sweet spot: a codebase that is fast, clean, and genuinely maintainable for your team.</div>
						</Segment>
					</div>
				</section>

				<!-- Recent Work Section -->
				<section class="mt-16">
					<h2 class="text-center mb-12">Latest Insights</h2>
					<div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
						<article class="card">
							<h3>Creative Web Animations</h3>
							<p class="text-[var(--color-text-muted)] mb-4">Exploring modern animation techniques to create engaging and performant web experiences.</p>
							<a href="/blog" class="text-[var(--color-text-muted)] font-medium hover:text-[var(--color-accent)] transition-colors duration-150">Read more →</a>
						</article>
						<article class="card">
							<h3>Modern Web Development</h3>
							<p class="text-[var(--color-text-muted)] mb-4">Best practices and innovative approaches for building cutting-edge web applications.</p>
							<a href="/blog" class="text-[var(--color-text-muted)] font-medium hover:text-[var(--color-accent)] transition-colors duration-150">Read more →</a>
						</article>
					</div>
				</section>

				<!-- Code Example Section -->
				<section class="mt-16">
					<h2 class="text-center mb-12">Cool Code Examples</h2>
					<div class="max-w-full overflow-x-auto rounded-lg bg-[var(--color-surface)] border border-[var(--color-border)]">
						<pre class="m-0 border-none bg-none"><code>{`// Interactive animation with performance
const CoolAnimation = ({ children }) => {
  const [isVisible, setIsVisible] = useState(false);
  
  useEffect(() => {
    const observer = new IntersectionObserver(
      ([entry]) => setIsVisible(entry.isIntersecting),
      { threshold: 0.1 }
    );
    
    return () => observer.disconnect();
  }, []);

  return (
    <motion.div
      initial={{ opacity: 0, y: 50 }}
      animate={isVisible ? { opacity: 1, y: 0 } : {}}
      transition={{ duration: 0.6, ease: "easeOut" }}
    >
      {children}
    </motion.div>
  );
};`}</code></pre>
					</div>
				</section>
</AppWrapper>
