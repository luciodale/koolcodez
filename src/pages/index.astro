---
import { getCollection } from 'astro:content';
import AppWrapper from '../building-blocks/AppWrapper.astro';
import BlogCardWithImage from '../components/BlogCardWithImage.astro';
import OpenSourceCard from '../components/OpenSourceCard.astro';
import SectionHeading from '../components/SectionHeading.astro';
import Segment from '../components/Segment.astro';
import { siteConfig } from '../config/site';

// Get the last 3 blog posts
const posts = await getCollection('blog');
const sortedPosts = posts.sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());
const recentPosts = sortedPosts.slice(0, 3);
---

<AppWrapper title={siteConfig.title} description={siteConfig.description}>
				<!-- Hero Section -->
				<section class="text-center max-w-4xl mx-auto">
						<img src="/kool-codez-logo.svg" alt={siteConfig.title} class="max-w-md mx-auto" />
					<p class="text-xl mx-auto max-w-xl pt-6 text-white">
						I craft fast, polished UIs built on a core of clean, stable, and genuinely maintainable code.
					</p>
				</section>

				<!-- Expertise Section -->
				<section class="py-8 md:py-12">
					<SectionHeading>My niche</SectionHeading>
					<div class="grid grid-cols-1 lg:grid-cols-3 gap-18 md:px-6">
						<Segment>
							<div slot="title">One truth</div>
							<div slot="description">I enforce a 100% TypeScript environment built on a single source of truth for types. This eliminates data duplication by validating types directly against backend contracts like OpenAPI and JSON Schema, ensuring frontend to backend consistency and preventing entire classes of integration bugs.</div>
						</Segment>
						<Segment>	
							<div slot="title">Light touch</div>
							<div slot="description">My design philosophy is minimal, clean, and slick. I prioritize speed and clarity, rejecting useless animations and overloaded interfaces that bog down the client. The result is a lightweight and intuitive UI that keeps the user focused and the experience seamless.

							</div>		
						</Segment>
						<Segment>
							<div slot="title">True balance</div>
							<div slot="description">My 8-year experience on performance sensitive applications has taught me the importance of balancing optimization with long term code health. I focus on finding that sweet spot: a codebase that is fast, clean, and genuinely maintainable for your team.</div>
						</Segment>
					</div>
				</section>

				<section class="py-8 md:py-12">
					<SectionHeading>Some open source</SectionHeading>
					<div class="flex flex-col items-center md:items-stretch md:flex-row justify-center gap-6 md:gap-12 md:px-12">
						<OpenSourceCard repoUrl="https://github.com/luciodale/react-searchable-dropdown">
							<div slot="title">react searchable dropdown</div>
							<div slot="description">Single and multi selection, virtualized, new option creation, search, and more.</div>
							<div slot="language">Typescript</div>
							<div slot="stars">84</div>
						</OpenSourceCard>
					<OpenSourceCard repoUrl="https://github.com/luciodale/fork">
							<div slot="title">fork</div>
							<div slot="description">A headless Clojurescript form management library for Re-frame and Reagent.</div>
							<div slot="language">Clojurescript</div>
							<div slot="stars">227</div>
						  </OpenSourceCard>
					</div>
				</section>

				<!-- Blog Section -->
				<section class="py-8 md:py-12">
					<SectionHeading>Latest articles</SectionHeading>
					<div class="grid gap-8 grid-cols-1 md:grid-cols-2 lg:grid-cols-3 md:px-12">
						{recentPosts.map((post) => (
							<BlogCardWithImage 
								slug={post.id} 
								date={post.data.pubDate}
								heroImage={post.data.heroImage}
							>
								<div slot="title">{post.data.title}</div>
								<div slot="description">{post.data.description}</div>
							</BlogCardWithImage>
						))}
					</div>
				</section>
				
</AppWrapper>
